service: integration-star-wars-api
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs18.x
  region: us-east-1
  stage: dev
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.PERSONAJES_TABLE_NAME}"

  environment:
    SWAPI_URL: 'https://swapi.py4e.com/api'
    PERSONAJES_TABLE_NAME: personajesTable-${self:provider.stage}

functions:
  api:
    handler: src/index.handler
    # solo para pruebas locales
    # timeout: 3600 
    events:  
      - httpApi:
          path: /${self:provider.stage}/api/v1/personajes
          method: 'GET'
          summary: 'Obtener personajes'
          description: 'Obtiene todos los personajes de Star Wars con opción de búsqueda por nombre, la información se obtiene de un servicio externo y de la base de datos propia'
          queryStringParameters:
            buscar:
              type: string
              required: false
              example: 'Luke'
              description: 'Cadena a buscar por nombre'
          responseData:
            200:
              description: 'Operación exitosa'
            500:
              description: 'Error en el procesamiento'
              
      - httpApi:
          path: /${self:provider.stage}/api/v1/personajes
          method: 'POST'
          summary: 'Crear personaje'
          description: 'Se crea un personaje de Star Wars y se guarda en una base de datos propia'
          bodyType: 'Personaje'
          responseData:
            201:
              description: 'Operación exitosa'
            500:
              description: 'Error en el procesamiento'

plugins:
  - serverless-auto-swagger
  - serverless-dynamodb
  - serverless-offline

custom:
  serverless-dynamodb:
    stages:
      - dev
    start:
      docker: true
      port: 8000
      inMemory: true
      migrate: true
      seed: true
      convertEmptyValues: true
      # Uncomment only if you already have a DynamoDB running locally
      # noStart: true  
  autoswagger:
      apiType: 'httpApi'
      title: 'Swagger - Uso e integracion de la API de Star Wars y una propia'
      description: 'Esta API permite obtener personajes de Star Wars y crear personajes propios'
      typefiles: ['./src/types/api-types.d.ts']
      # typefiles: []
      useStage: true
      # swaggerFiles: ['./doc/info.json']
      generateSwaggerOnDeploy: true

resources:
  Resources:
    PersonajesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.PERSONAJES_TABLE_NAME}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
